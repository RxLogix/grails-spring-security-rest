allprojects {
    apply plugin: 'idea'
    apply plugin: 'com.gorylenko.gradle-git-properties'
}

def pluginProjects = [
        'spring-security-rest',
        'spring-security-rest-memcached',
        'spring-security-rest-redis',
        'spring-security-rest-grailscache',
        'spring-security-rest-gorm'
]
def profileProjects = ['spring-security-rest-testapp-profile']
def publishedProjects = pluginProjects + profileProjects

ext {
    grailsVersion = project.grailsVersion
    isSnapshot = projectVersion.endsWith('SNAPSHOT')
    isReleaseVersion = !isSnapshot
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY')
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg"


subprojects { Project project ->
    group = "org.grails.plugins"
    version = projectVersion

    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }

    if (project.name != "spring-security-rest-docs" &&
            project.name != "spring-security-rest-testapp-profile" &&
            !project.name.startsWith("build")) {
        apply plugin: "org.grails.grails-plugin"
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    if (project.name in pluginProjects) {
        apply plugin: 'java'
        apply plugin: 'java-library'

        sourceCompatibility = '11'
        targetCompatibility = '11'

        dependencies {
            api "org.springframework.boot:spring-boot-starter-logging"
            api "org.springframework.boot:spring-boot-autoconfigure"
            api "org.grails:grails-core"
            api "org.grails.plugins:spring-security-core:$springSecurityCoreVersion"
            api "org.grails:grails-plugin-services"
            api "org.grails:grails-plugin-domain-class"

            testImplementation "org.grails:grails-gorm-testing-support"
            testImplementation "org.grails:grails-web-testing-support"
            testImplementation('com.athaydes:spock-reports:2.5.1-groovy-3.0') {
                transitive = false
            }
        }

        configurations.all {
            exclude group: 'io.micronaut', module: 'micronaut-jackson-databind'
        }

        bootRun {
            ignoreExitValue true
            jvmArgs(
                    '-Dspring.output.ansi.enabled=always',
                    '-noverify',
                    '-XX:TieredStopAtLevel=1',
                    '-Xmx1024m',
                    '-Dfile.encoding=UTF-8' // Adding this for consistent file encoding
                    )
            sourceResources sourceSets.main
            String springProfilesActive = 'spring.profiles.active'
            systemProperty springProfilesActive, System.getProperty(springProfilesActive)
        }

        apply plugin: 'com.adarshr.test-logger'

        testlogger {
            showFullStackTraces true
            showStandardStreams true
            showPassedStandardStreams false
            showSkippedStandardStreams false
            showFailedStandardStreams true
        }
    }

    if (project.name in profileProjects) {
        apply plugin: "org.grails.grails-profile"
    }

    if (project.name in publishedProjects && project.name != "spring-security-rest-docs" &&
            project.name != "spring-security-rest-testapp-profile") {
        apply plugin: 'maven-publish'
        apply plugin: 'signing'

        // enable if you wish to package this plugin as a standalone application
        bootJar.enabled = false

        publishing {
            repositories {
                maven {
                    name = "NexusRepo"
                    credentials {
                        username = project.findProperty("nexusUsername") ?: System.getenv("NEXUS_USERNAME")
                        password = project.findProperty("nexusPassword") ?: System.getenv("NEXUS_PASSWORD")
                    }
                    url = project.findProperty("nexusUrl") ?: System.getenv("NEXUS_URL")
                    allowInsecureProtocol = project.findProperty("isNexusUrlInsecure") ? true : false
                }
            }
            publications {
                mavenRelease(MavenPublication) {
                    groupId = project.group
                    artifactId = project.name
                    version = project.version
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar

                    pom {
                        name = 'Spring Security REST plugin'
                        description = 'Grails plugin to implement token-based, RESTful authentication using Spring Security'
                        url = 'https://github.com/grails/grails-spring-security-rest'
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        // Uncomment and configure developers and scm sections if needed
                        /*
                        developers {
                            developer {
                                id = 'alvarosanchez'
                                name = 'Alvaro Sanchez-Mariscal'
                                email = ''
                            }
                            developer {
                                id = 'jameskleeh'
                                name = 'James Kleeh'
                                email = ''
                            }
                        }
                        scm {
                            connection = 'scm:git:https://github.com/grails/grails-spring-security-rest.git'
                            developerConnection = 'scm:git:https://github.com/grails/grails-spring-security-rest.git'
                            url = 'https://github.com/grails/grails-spring-security-rest/tree/3.0.x'
                        }
                        */
                    }
                }
            }
        }

        // Uncomment if you want to enable signing
        /*
        signing {
            sign publishing.publications.mavenRelease
        }
        */
    }
}

gitProperties {
    keys = ['git.branch', 'git.commit.id', 'git.commit.time', 'git.commit.id.abbrev']
    failOnNoGitDirectory = true
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps
}

generateGitProperties.outputs.upToDateWhen {
    false
} // make sure the generateGitProperties task always executes (even when git.properties is not changed)

task aggregateGroovyDoc(type: Groovydoc) {
    def groovyDocProjects = subprojects.findAll { it.name in pluginProjects }
    group = JavaBasePlugin.DOCUMENTATION_GROUP

    dependsOn groovyDocProjects.groovydoc
    source groovyDocProjects.groovydoc.source
    destinationDir = file("${buildDir}/docs/groovydoc")
    classpath = files(groovyDocProjects.groovydoc.classpath)
    groovyClasspath = files(groovyDocProjects.groovydoc.groovyClasspath)
}